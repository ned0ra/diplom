import streamlit as st
import pandas as pd
import plotly.express as px
import psycopg2
from datetime import datetime
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'dbname': 'postgres',
    'user': 'postgres',
    'password': '11111',
    'host': '127.0.0.1',
    'port': '5432'
}

@st.cache_data(ttl=3600)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    conn = psycopg2.connect(**DB_CONFIG)
    
    queries = {
        'vacancies': """
            SELECT v.*, c.company_name, c.region_code, r.region_name, r.city 
            FROM vacancy v
            LEFT JOIN company c ON v.company_code = c.company_code
            LEFT JOIN region r ON c.region_code = r.region_code
        """,
    }
    
    df = pd.read_sql(queries['vacancies'], conn)
    conn.close()

    df['city'] = df['city'].str.strip()
    
    df['salary_max'] = df.apply(
        lambda x: x['salary_min'] if x['salary_max'] == 0 else x['salary_max'],
        axis=1
    )
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    df['salary_avg'] = (df['salary_min'] + df['salary_max']) / 2
    df['date'] = pd.to_datetime(df['last_updated'])
    # df['experience'] = df['requirement_experience'].fillna('–ù–µ —É–∫–∞–∑–∞–Ω')

    df['region_name'] = pd.Categorical(
        df['region_name'], 
        categories=sorted(df['region_name'].unique()),
        ordered=True
    )
    df['requirement_experience'] = df['requirement_experience'].replace(regex=r'^(?!([0-3]|$)).*', value=0).astype(int)

    def map_experience(value):
        value = int(float(value))  # –î–≤–æ–π–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if value == 0: return '–ë–µ–∑ –æ–ø—ã—Ç–∞'
        elif value == 1: return '1-3 –≥–æ–¥–∞'
        elif value == 2: return '3-6 –ª–µ—Ç'
        elif value == 3: return '6+ –ª–µ—Ç'

    df['experience'] = df['requirement_experience'].apply(map_experience)
    
    return df

def show_vacancies_table(df):
    st.header("–¢–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
    st.sidebar.subheader("–§–∏–ª—å—Ç—Ä—ã —Ç–∞–±–ª–∏—Ü—ã")
    
    selected_jobs = st.sidebar.multiselect(
        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        df['category_specialisation'].unique()
    )
    
    selected_regions = st.sidebar.multiselect(
        "–†–µ–≥–∏–æ–Ω—ã",
        df['region_name'].unique()
    )
    
    salary_range = st.sidebar.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç (—Å—Ä–µ–¥–Ω–∏—Ö)",
        int(df['salary_avg'].min()),
        int(df['salary_avg'].max()),
        (int(df['salary_avg'].min()), int(df['salary_avg'].max()))
    )
    
    employment_types = st.sidebar.multiselect(
        "–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
        df['employment'].unique(),
        default=df['employment'].unique()
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = df[
        (df['category_specialisation'].isin(selected_jobs) if selected_jobs else True) &
        (df['region_name'].isin(selected_regions) if selected_regions else True) &
        (df['salary_avg'].between(salary_range[0], salary_range[1])) &
        (df['employment'].isin(employment_types))
    ]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    st.dataframe(
        filtered_df[[
            'job_name', 'region_name',
            'salary_min', 'salary_max', 'salary_avg',
            'employment', 'category_specialisation', 'city', 'date'
        ]].sort_values('date', ascending=False),
        height=600,
        use_container_width=True
    )
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    st.download_button(
        "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
        filtered_df.to_csv(index=False),
        "vacancies.csv",
        "text/csv"
    )

def show_visualizations(df):
    st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    viz_type = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
        ["–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –≤–∞–∫–∞–Ω—Å–∏–π", "–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç", "–¢–æ–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]
    )
    
    if viz_type == "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –≤–∞–∫–∞–Ω—Å–∏–π":
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        
        # –ö–∞—Ä—Ç–∞ –†–æ—Å—Å–∏–∏ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
        region_stats = df.groupby('region_name').agg({
            'id': 'count',
            'salary_avg': 'mean'
        }).reset_index()
        
        fig1 = px.choropleth(
            region_stats,
            geojson="https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/russia.geojson",
            locations='region_name',
            featureidkey="properties.name",
            color='id',
            hover_name='region_name',
            hover_data=['salary_avg'],
            # color_continuous_scale='Blues',
            title='<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º</b>',
            labels={'id': '–í–∞–∫–∞–Ω—Å–∏–π'},
            scope='europe',
            height=1500,
            width = 5000,
            center={'lat': 62, 'lon': 94},
            projection='mercator'
        )
        # fig1.update_geos(fitbounds="locations", visible=False)
        st.plotly_chart(fig1, use_container_width=True)
        
        # –¢–æ–ø-15 –≥–æ—Ä–æ–¥–æ–≤
        st.subheader("–¢–æ–ø-15 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π")
        city_counts = df['region_name'].value_counts().nlargest(15)
        fig2 = px.bar(
            city_counts,
            x=city_counts.values,
            y=city_counts.index,
            orientation='h',
            color=city_counts.values,
            color_continuous_scale='Blues',
            text=city_counts.values,
            labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', 'y': '–†–µ–≥–∏–æ–Ω'},
            height=600
        )
        fig2.update_traces(textposition='outside')
        st.plotly_chart(fig2, use_container_width=True)
    
    elif viz_type == "–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç":
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        possible_categories = ['–ë–µ–∑ –æ–ø—ã—Ç–∞', '1-3 –≥–æ–¥–∞', '3-6 –ª–µ—Ç', '6+ –ª–µ—Ç']
        existing_categories = [cat for cat in possible_categories 
                            if cat in df['experience'].unique()]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—ã—Ç–∞
        if not existing_categories:
            st.warning("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã")
            return
        
        df['experience'] = pd.Categorical(
            df['experience'], 
            categories=existing_categories,
            ordered=True
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ 
        if 'region_name' in df.columns:
            all_regions = ['–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã'] + sorted(df['region_name'].dropna().unique().tolist())
            selected_region = st.selectbox(
                'üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:', 
                all_regions,
                index=0
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
            if selected_region != '–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã':
                filtered_df = df[df['region_name'] == selected_region]
            else:
                filtered_df = df.copy()
        else:
            filtered_df = df.copy()
            selected_region = '–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã'
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ä–µ–¥–Ω–∏–º –∑–∞—Ä–ø–ª–∞—Ç–∞–º
        salary_stats = filtered_df.groupby('experience', observed=True) \
            .agg(avg_salary=('salary_avg', 'mean')) \
            .reset_index()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if salary_stats.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        fig = px.bar(
            salary_stats,
            x='experience',
            y='avg_salary',
            color='experience',
            title=f'–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã {"–≤ —Ä–µ–≥–∏–æ–Ω–µ " + selected_region if selected_region != "–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã" else ""}',
            labels={'avg_salary': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', 'experience': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'},
            text_auto='.2f'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            xaxis_title='–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
            yaxis_title='–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞',
            showlegend=False,
            hovermode='x unified'
        )
        fig.update_traces(
            textfont_size=12,
            textangle=0,
            textposition='outside'
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        st.plotly_chart(fig, use_container_width=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º')
        st.dataframe(
            salary_stats.rename(columns={
                'avg_salary': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞',
                'experience': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'
            }),
            hide_index=True
        )  


        # –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –æ–ø—ã—Ç—É
        st.subheader("–ó–∞—Ä–ø–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        fig2 = px.box(
            df,
            x='requirement_education',
            y='salary_avg',
            color='requirement_education',
            points=False,
            labels={'salary_avg': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)', 'requirement_education': '–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç'},
            height=500
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    elif viz_type == "–¢–æ–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–¢–æ–ø-10 –ø—Ä–æ—Ñ–µ—Å—Å–∏–π")
            top_jobs = df['job_name'].value_counts().nlargest(10)
            fig1 = px.bar(
                top_jobs,
                x=top_jobs.values,
                y=top_jobs.index,
                orientation='h',
                color=top_jobs.values,
                color_continuous_scale='Teal',
                text=top_jobs.values,
                labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'y': ''},
                height=500
            )
            st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            st.subheader("–¢–æ–ø-10 –∫–æ–º–ø–∞–Ω–∏–π")
            top_companies = df['company_name'].value_counts().nlargest(10)
            fig2 = px.bar(
                top_companies,
                x=top_companies.values,
                y=top_companies.index,
                orientation='h',
                color=top_companies.values,
                color_continuous_scale='Peach',
                text=top_companies.values,
                labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'y': ''},
                height=500
            )
            st.plotly_chart(fig2, use_container_width=True)
        
        st.subheader("–¢–æ–ø-10 –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ")
        top_salary = df.groupby('company_name')['salary_avg'].mean().nlargest(10).reset_index()
        fig3 = px.bar(
            top_salary,
            x='salary_avg',
            y='company_name',
            orientation='h',
            color='salary_avg',
            color_continuous_scale='Purp',
            text=top_salary['salary_avg'].apply(lambda x: f"{int(x):,} ‚ÇΩ"),
            labels={'salary_avg': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', 'company_name': ''},
            height=500
        )
        fig3.update_traces(textposition='outside')
        fig3.update_layout(xaxis_title="–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)")
        st.plotly_chart(fig3, use_container_width=True)

def show_metrics_analysis(df):
    st.header("–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    time_period = st.sidebar.selectbox(
        "–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥",
        ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥", "–í—Å—ë –≤—Ä–µ–º—è"]
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    now = datetime.now()
    if time_period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
        time_filter = now - pd.Timedelta(days=7)
    elif time_period == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
        time_filter = now - pd.Timedelta(days=30)
    elif time_period == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥":
        time_filter = now - pd.Timedelta(days=365)
    else:
        time_filter = df['date'].min()
    
    time_df = df[df['date'] >= time_filter]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π", time_df.shape[0])
    with col2:
        st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{int(time_df['salary_avg'].mean())} ‚ÇΩ")
    with col3:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π", time_df['company_name'].nunique())
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    freq = st.radio(
        "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞",
        ["–ü–æ –¥–Ω—è–º", "–ü–æ –Ω–µ–¥–µ–ª—è–º", "–ü–æ –º–µ—Å—è—Ü–∞–º"],
        horizontal=True
    )
    
    if freq == "–ü–æ –¥–Ω—è–º":
        freq_param = 'D'
    elif freq == "–ü–æ –Ω–µ–¥–µ–ª—è–º":
        freq_param = 'W'
    else:
        freq_param = 'M'
    
    dynamic_df = time_df.groupby(pd.Grouper(key='date', freq=freq_param)).agg({
        'id': 'count',
        'salary_avg': 'mean'
    }).reset_index()
    
    fig = px.line(
        dynamic_df,
        x='date',
        y='id',
        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π',
        labels={'id': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'date': '–î–∞—Ç–∞'}
    )
    st.plotly_chart(fig, use_container_width=True)
    

def main():
    st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
        ["–¢–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", "–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫"]
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == "–¢–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π":
        show_vacancies_table(df)
    elif page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
        show_visualizations(df)
    elif page == "–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫":
        show_metrics_analysis(df)

if __name__ == "__main__":
    main()